补码的设计使得有符号数和无符号数的运算过程是一样一样的。

比方说(1000 0001)B，无论是当成有符号的-127还是无符号的129，执行
add al,1
后结果都是(1000 0010)B，这个数可以看成是有符号的-126，也可以看成是无符号的130，计算结果跟数学上的-127+1=-126或者129+1=130是一致的。
补码的设计使CPU运算时压根不用考虑数据是不是有符号，但为了方便程序员，CPU计算完成后会根据结果 同时 设置N个符号位，如SF、ZF、CF、OF、PF等，根据各标志位就可以同时知道有符号数和无符号数的计算结果。

注意“同时”两字。

CF主要是针对无符号数：
计算结果超出寄存器可存储的宽度了就把CF置为1，如al=(1111 1111)B, 数学上来说，(al)+1=(1 0000 0000)B，但al只能存8位，即(al)=(0000 0000)B，进位的1怎么办？CF=1。

OF主要针对有符号数：
当把操作数作为有符号数解释时，如果计算结果出错了就把OF置为1。
如(al)=(0000 0010)B，(bl)=(0111 1111)B，add al,bl，(al)=(1000 0001)B。在数学上，两个正数相加结果还是正数，但按有符号数解释的话(1000 0001)B是负数，计算结果“出错”了，CPU就将OF置1。
------------------------over--------------------------
附：
上面说了，CPU会根据结果同时设置N个符号位：
(1111 1111)B+1=(1 0000 0000)B   会置ZF=1，OF=0，CF=1，SF=0；
(0000 0010)B+(0111 1111)B=(1000 0001)B   会置ZF=0，OF=1，CF=0，SF=1，你可以算算为什么会这样。



汇编中有符号与无符号数的区分一、只有一个标准！在汇编语言层面，声明变量的时候，没有signed和unsignde之分，汇编器统统，
将你输入的整数字面量当作有符号数处理成补码存入到计算机中，只有这一个标准！汇编器不会区分有符号还是无符号然后用两个标准来处理，它统统当作有符号的！
并且统统汇编成补码！也就是说，db -20 汇编后为：EC ，而 db 236 汇编后也为 EC 。这里有一个小问题，思考深入的朋友会发现，db 是分配一个字节，
那么一个字节能表示的有符号整数范围是：-128 ~ +127 ，那么 db 236 超过了这一范围，怎么可以？是的，+236 的补码的确超出了一个字节的表示范围，
那么拿两个字节（当然更多的字节更好了）是可以装下的，应为：00 EC，也就是说 +236的补码应该是00 EC，一个字节装不下，但是，别忘了“截断”这个概念，
就是说最后的结果被截断了，00 EC 是两个字节，被截断成 EC ，所以，这是个“美丽的错误”，为什么这么说？因为，当你把 236 当作无符号数时，它汇编后的
结果正好也是 EC ，这下皆大欢喜了，虽然汇编器只用一个标准来处理，但是借用了“截断”这个美丽的错误后，得到的结果是符合两个标准的！也就是说，给你一个字节，
你想输入有符号的数，比如 -20 那么汇编后的结果是正确的；如果你输入 236 那么你肯定当作无符号数来处理了（因为236不在一个字节能表示的有符号数的范围内啊）
，得到的结果也是正确的。于是给大家一个错觉：汇编器有两套标准，会区分有符号和无符号，然后分别汇编。其实，你们被骗了。:-)  
二、存在两套指令！
  第一点说明汇编器只用一个方法把整数字面量汇编成真正的机器数。但并不是说计算机不区分有符号数和无符号数，相反，计算机对有符号和无符号数区分的十分清晰
  ，因为计算机进行某些同样功能的处理时有两套指令作为后备，这就是分别为有符号和无符号数准备的。但是，这里要强调一点，一个数到底是有符号数还是无符号数
  ，计算机并不知道，这是由你来决定的，当你认为你要处理的数是有符号的，那么你就用那一套处理有符号数的指令，当你认为你要处理的数是无符号的，那就用处理
  无符号数的那一套指令。加减法只有一套指令，因为这一套指令同时适用于有符号和无符号。下面这些指令：mul div movzx … 是处理无符号数的，
  而这些：imul idiv movsx … 是处理有符号的。 举例来说： 内存里有 一个字节x 为：0x EC ，一个字节 y 为：0x 02 。当把x，y当作有符号数来看时
  ，x = -20 ，y = +2 。当作无符号数看时，x = 236 ，y = 2 。下面进行加运算，用 add 指令，得到的结果为：0x EE ，那么这个 0x EE 当作有符号数就
  是：-18 ，无符号数就是 238 。所以，add 一个指令可以适用有符号和无符号两种情况。（呵呵，其实为什么要补码啊，就是为了这个呗，:-)）乘法运算就不行了
  ，必须用两套指令，有符号的情况下用imul得到的结果是：0x FF D8就是-40。无符号的情况下用mul，得到：0x 01 D8就是472。（参看文后附录2例程）
三、可爱又可怕的
c语言。为什么又扯到c了？因为大多数遇到有符号还是无符号问题的朋友，都是c里面的signed和unsigned声明引起的，那为什么开头是从汇编讲起呢？因为我们现在
用的c编译器，无论gcc也好，vc6的cl也好，都是将c语言代码编译成汇编语言代码，然后再用汇编器汇编成机器码的。搞清楚了汇编，就相当于从根本上明白了c，而
且，用机器的思维去考虑问题，必须用汇编。（我一般遇到什么奇怪的c语言的问题都是把它编译成汇编来看。）C是可爱的，因为c符合kiss原则，对机器的抽象程度
刚刚好，让我们即提高了思维层面（比汇编的机器层面人性化多了），又不至于离机器太远（像c#，java之类就太远了）。当初K&R版的c就是高级一点的汇编……:-)C
又是可怕的，因为它把机器层面的所有的东西都反应了出来，像这个有没有符号的问题就是一例（java就不存在这个问题，因为它被设计成所有的整数都是有符号的）。
为了说明c的可怕特举一例：
#include<stdio.h>#include<string.h>
int main()
{
int x=2;char*str="abcd";int y=(x-strlen(str))/2;printf("%d\n",y);
}结果应该是-1
但是却得到：2147483647。为什么?因为strlen的返回值，类型是size_t，也就是unsigned int，与int混合计算时类型被自动转换了，结果自然出乎意料。。。
观察编译后的代码，除法指令为div，意味无符号除法。解决办法就是强制转换，变成int y=(int)(x-strlen(str))/2;强制向有符号方向转换（编译器默认正好
相反），这样一来，除法指令编译成idiv了。我们知道，就是同样状态的两个内存单位，用有符号处理指令imul，idiv等得到的结果，与用无符号处理指令mul，div
等得到的结果，是截然不同的！所以牵扯到有符号无符号计算的问题，特别是存在讨厌的自动转换时，要倍加小心！（这里自动转换时，无论gcc还是cl都不提示！！！
）为了避免这些错误，建议，凡是在运算的时候，确保你的变量都是signed的。（完）
